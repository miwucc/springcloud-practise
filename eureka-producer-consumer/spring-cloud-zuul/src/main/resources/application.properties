spring.application.name=gateway-service-zuul
server.port=18888
#eureka注册
eureka.user=test
eureka.pwd=test
eureka.client.serviceUrl.defaultZone=http://${eureka.user}:${eureka.pwd}@localhost:8001/eureka/

#网关用户接入线程数
server.tomcat.max-threads=200

#路由规则，每组由path和url或者serviceId组成，中间的luyou1是一个路由配置的名字，可以随意取。
#serviceId就是微服务名字。面向服务路由的时候，需要自己是一个springcloud客户端，可以获取注册中心信息，加注解@EnableDiscoveryClient
zuul.routes.luyou1.path=/luyou-1/**
zuul.routes.luyou1.url=http://baidu.com/
#zuul.routes.luyou2.path=/luyou-2/**
#zuul.routes.luyou2.serviceId=consumer-service

#没有介入eureka的时候可以自己设定组合一个服务名来进行妆发，比如：
#zuul.routes.luyou-baidu.path=/luyou-baidu/**
#zuul.routes.luyou-baidu.serviceId=baidu-service
#因为没有引入eureka,但是又要用ribbon，所以先要把这个关掉,然后自己配置上面取名的服务的后端转发地址，下面就是在百度和163之间切换
#ribbon.eureka.enabled=false
#baidu-service.ribbon.listOfServers=http://baidu.com/,http://163.com/

#eureka服务路由可以把path和serverID配对两个缩成一个
#zuul.routes.<serverId>=/path/**
#在引入了eureka的前提下，如果你一个映射都不配，则会默认把所有注册中心上的都配上，需要用ignore来把部需要配置的去除，如果配了一个，则只会那这一个为准。
#zuul.ignored-services=
#zuul.ignored-patterns=/**/hello/**
#?单个字符,*多个字符,**多个字符多级目录
#本地跳转：
#zuul.routes.luyou2.path=/luyou-2/**
#zuul.routes.luyou2.url=forward:/local/xxx

#zuul会自动过滤掉http的铭感头信息Cookie，Set-Cookie，Authorization,如果需要重新覆盖或者设置为空采用下面方法：所以在web应用过网关的一定要特别注意
#zuul.sensitive-headers=
##或者指定只设置其中一个
#zuul.routes.<luyou>.custom-sensitive-headers=true
#zuul.routes.<luyou>.sensitive-headers.=xxx,xx

#解决302重新定向定向到内部服务去了的问题，需要设置host为网关服务
zuul.add-host-header=true

#ribbon和hystrix配置，断路器只会对path+serverId组合生效，对path+url组合无效
#是否开启ribbon重试功能,这个用来代替ribbon自己的配置
zuul.retryable=true
#对当前服务的重试次数
ribbon.MaxAutoRetries=0
#切换相同Server的次数
ribbon.MaxAutoRetriesNextServer=1
#ribbon客户端需要立即加载
ribbon.eager-load.enabled=true
ribbon.ConnectTimeout=2000
ribbon.ReadTimeout=5000
ribbon.OkToRetryOnAllOperations=false
#打开断路器，默认关闭
feign.hystrix.enabled=true
#网关断路器为了性能默认采取信号量模式，而且zuul里面的hystrix的commondkey也就是隔离级别是serverId，不是方法，一个服务一个隔离
#原生的hystrix隔离类型配置key会失效，zuul这里是组装了新key覆盖了原来的配置，默认就是SEMAPHORE，也请不要使用thread
zuul.ribbonIsolationStrategy=SEMAPHORE
#zuul配置文件类ZuulProperties
#最大并发粒度默认是100，这个信号量并发控制数其实并不完全代表tps数，在异步调用的手时候，这个数量可能大于线程数量
#但是在同步调用的时候，这个计数器是在hystrixComannd执行的时候开始技术，结束(fallback或者异常或者正常结束)的时候结束计数，
#所以计数的时候其实线程没有释放，可以认为同时计数最大数目其实就是和线程数一样。但是这并不代表tps，如果一个任务平均耗时0.5s,实际tps=1/0.5*threadNum=400
#TryableSemaphoreActual.tryAcquire里面可以查看源码
zuul.semaphore.max-semaphore=200
#可以对某些特别快的单个服务，比如有异步操作的，可以单独设定把这个设置大些，进行指定设置zuul.eureka.<serviceId>.semaphore.maxSemaphore=1000
#断路器超时时间，需要大于(ribbon.ConnectTimeout+ribbon.ReadTimeout)*(1+MaxAutoRetries)*(1+MaxAutoRetriesNextServer)，默认1s，这里设置为10s
#因为这个是信号量隔离，这个时间智能触发fallback，但是主线程的结束还是要一开ribbon的超时时间和下面zuul.host的超时时间
#这个超时会释放掉信号量计数，所以这个还是要配而且时间要准确
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000

#往后端请求的http连接池配置
#往后端总共可以打开的连接总数（所有route加一起）,默认200,
#这个就类似于你写httpclient需要设置一个连接池，方便复用连接。具体多少满足条件，个人建议总连接数可以和tomcat线程池设置为一样，单连接数可以用200/后端服务数,如果除得太小，则最小设置20
#要注意，这儿其实就跟用浏览器去访问一个网站一个，一般一个浏览器同时对一个host能打开的连接数=10，但是每个连接在业务线程使用的时候是同步等待返回的。
#所以这里你设置20个连接数，也是要依赖后端返回速度的，加入平均一个task的处理速度是0.5s,则tps=(1/0.5)*20=40TPS
#连接数也不是越大越好，多了会导致线程间等待和上下文切换，最好还是优化处理速度，这儿其实就跟数据库连接池是一个道理，没说数据库连接池要配几百个，多了反倒慢。
zuul.host.maxTotalConnections=200
#单个服务route(服务)可以打开的最大连接数，默认20
zuul.host.maxPerRouteConnections=20
#读取数据返回时间最大时间，默认10s，
#这个和上面的ribbon配置read超时时间配置成一样即可，这个是用于非path+url组合生效的，而path+serverId是ribbon的配置生效
zuul.host.socketTimeoutMillis=10000
#连接超时时间，默认2s,同上，和ribbon的配置相似，主要对path+url路由生效
zuul.host.connectTimeoutMillis=2000
#http连接池连接存活时间，默认用完就抛
zuul.host.timeToLive=-1

#其它使用，比如跨域设置参考等：更多配置看zuul官方github，以及一些参考配置文章连接如下：
#https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#uploading-files-through-zuul
#https://github.com/Netflix/zuul/wiki/zuul-simple-webapp
#http://www.chinacion.cn/article/4126.html
#https://www.jianshu.com/p/3cc91c15f4a3
#https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix


#网关的主要功能:
#1.统一入口，可以按流量分类分成几个网关集群，比如h5网关集群,api集群，主要是为了按流量分类好控制，一般一个入口一个域名，这样
#   外部统一按该域名入口进入，分割了内网入口，同时可以统计到该切面上所有方法调用的metric
#2.动态路由(在后端服务有变化的时候不重启网关就能动态路由，传统的nginx不行，所以kong，ingress，zuul这一类的才可以干这个事情)
#3.统一权限认证,这里的权限认证指的是验证token，把token转意为JWTtoken然后往后传的步骤(请参考OAUth2流程)，而不是指的根业务相关的表相关的各种接口拦截。
#  网关不要和任何具体业务绑定，要做一个纯粹的公共事务处理的功能，和业务绑定是要不得的，业务相关的全部放后面编排层去。
#4.灰度发布(根据请求带的标识或路由方法做流量路由),包括使用zuulFilter做groovy的过滤器，也应该是做灰度，金丝雀发布一类的统一事务，而不要做具体的业务相关的过滤事务。过滤器这一块分为前置，路由(中)，后置过滤器，具体的可以再去看逻辑结构图
#5.负载均衡
#6.熔断
#7.限流
#8.qps统计,metric统计
#9.接口调用统一日志打印

#zuul最大的问题是，对前端用户是用tomcat来抗的请求，对后端路由采用的逼仓隔离是采用的thread模式，太消耗性能，并发能力不强。
#只支持http,但是不支持websocket代理，也不支持纯tcp，udp代理。
#如果用信号量模式的话，又不能及时的timeout断掉主线程。(当然可以用ribbon配置超时来搞)
#动态路由可以结合apollo配置中心来搞定,zuul支持动态更新路由规则和动态增加删除过滤器代码(需要用groovy代码来实现热加载)ZuulFilterInitializer
#但是zuul的断路器是用的hystrix，hystrix只能做到单实例单方法流控，不够精准，不能针对后端服务集群整体做流控，而且相应的webui监控中心也比较简陋，所以这里推荐使用阿里的sentinal来替换hystrix
#自定义过滤器实现zuul的限流https://www.cnblogs.com/shamo89/p/8940606.html(因为hystrix只能实现后端代理是内部服务且不够细腻)
#zuul1和zuul2对比 http://ju.outofmemory.cn/entry/362416