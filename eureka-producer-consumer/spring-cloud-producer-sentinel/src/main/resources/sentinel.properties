##必须要用UTF8编码！！！！！不然不会生效!!!!
##classpath下的properties配置方式要大于1.7.0才可以，不然请使用JVM启动参数
#Sentinel 提供如下的配置方式：
#
#JVM -D 参数方式
#properties 文件方式（1.7.0 版本开始支持）
#其中，project.name 参数只能通过 JVM -D 参数方式配置，其它参数支持所有的配置方式。
#
#优先级顺序：JVM -D 参数的优先级最高。若 properties 和 JVM 参数中有相同项的配置，以 JVM 参数配置的为准。
#
#用户可以通过 -Dcsp.sentinel.config.file 参数配置 properties 文件的路径，支持 classpath 路径配置（如 classpath:sentinel.properties）。默认 Sentinel 会尝试从 classpath:sentinel.properties 文件读取配置，读取编码默认为 UTF-8。
#
#注：1.7.0 以下版本可以通过 ${user_home}/logs/csp/${project.name}.properties 配置文件进行配置（除 project.name 和日志相关配置项）。
#
#注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以使用 Spring Cloud Alibaba，通过 Spring 配置文件来指定配置，详情请参考 Spring Cloud Alibaba Sentinel 文档。

#sentinel-core 的配置项
#指定应用的名称,若未指定，则默认解析 main 函数的类名作为应用名。实际项目使用中建议手动指定应用名。
#发现这个配置是不支持peoperties配置的。因为实际取值是SentinelConfig.getAppName：return AppNameUtil.getAppName();，需要在JVM参数里面配置-Dproject.name=xxx

#配置加载类SentinelConfigLoader。可以看源码，新版本很多bug!!!

#不建议使用1.70。，建议使用1.6.x最后一个版本,1.7还比较新太多bug
#下面的参数也不是全都可以生效的，需要参照ConfigUtil.loadPropertiesp配置加载类的源码

#启动dashboard使用 java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -Dsentinel.dashboard.auth.username=sentinel -Dsentinel.dashboard.auth.password=123456 -jar sentinel-dashboard.jar
#client端需要使用 -Dproject.name=xxx -Dcsp.sentinel.dashboard.server=consoleIp:port 这个JVM参数用来进行连接,-Dcsp.sentinel.dashboard.server因为1.7.0可以用properties可以不要，但是Dproject.name必须要properties里面那个还没生效

project.name=spring-cloud-producer-sentinel
#指定应用的类型,1.6引入 0普通 1网关
csp.sentinel.app.type=0
#单个监控日志文件的大小,默认50M 52428800
#csp.sentinel.metric.file.single.size=52428800
#监控日志文件的总数上限,默认6
#csp.sentinel.metric.file.total.count=6
#最大的有效响应时长（ms）默认4900ms，超出此值则按照此值记录 1.4.1 引入
csp.sentinel.statistic.max.rt=4900
#SPI 加载时使用的 ClassLoader，默认为给定类的 ClassLoader，若配置 context 则使用 thread context ClassLoader 1.7.0 引入，默认default
#csp.sentinel.spi.classloader=default

#日志相关配置项
#文件路径 1.3引入,默认 ${user.home}/logs/csp/
csp.sentinel.log.dir=D:/logs/csp
#日志文件名中是否加入进程号，用于单机部署多个应用的情况 1.3.0 引入
csp.sentinel.log.use.pid=false
#Record 日志输出的类型，file 代表输出至文件，console 代表输出至终端 1.6.2 引入
#csp.sentinel.log.output.type=console
csp.sentinel.log.output.type=file

# sentinel-transport-common 监控台相关配置项
#控制台的地址，指定控制台后客户端会自动向该地址发送心跳包。地址格式为：hostIp:port
csp.sentinel.dashboard.server=127.0.0.1:8080
# 心跳包发送周期，单位毫秒 非必需，若不进行配置，则会从相应的 HeartbeatSender 中提取默认值
#csp.sentinel.heartbeat.interval.ms
# 本地启动 HTTP API Server 的端口号,默认，是客户端api接口端点
# 如果本地发现默认的8719被占用了，循环尝试端口是否被占用，每个端口尝试三次，若被占用则取下一个+1端口，一直到可用的端口返回 方便dashboard反向查询监控日志，然后传输到dashboad上显示，所以上面的日志非常重要
#csp.sentinel.api.port=8719
# 指定心跳包中本机的 IP，若不指定则通过 HostNameUtil 解析；该配置项多用于多网卡环境，这个IP会上传到dashboard，然后dashboard和上面的端口一起来反查api接口和metric监控接口获取监控日志和资源配置信息
# 这里配置本地IP方便快速连接反查
csp.sentinel.heartbeat.client.ip=127.0.0.1

# 超级重要的理解！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
#//    !!!!!! 为什么sentinel提供的RT和比率模式都是秒级的统计窗口？异常数模式固定是分钟级的？ 为什么不能设置统计窗口时长更长？！，只能设置熔断持续时间窗口时长？
#//    。。。。难道是因为监控性能日志是秒级的方便打印?那流量小的业务咋办，1S内少于5个请求，这意思是说这系统qps太低没必要熔断了？
#//    所以这儿的理解非常重要！！！！熔断保护的是什么！！，是异常情况下对占用等待线程池的堆积！所以qps很低的情况下没有必要开熔断，触发异常直接走fallback方法就完了。
#//    比如qps<5,比如10秒内4个请求，这种情况下你失败就失败，用不着触发熔断，顶多10s堆积浪费你4个线程！
#//    hystrix默认的值是10S内不少于20次请求，失败50%，则触发5秒熔断，意思就是10s的平均qps>2,才会取判定触发熔断。

#      hystrix的commond执行隔离模式不管是用线程还是信号量，都只能做到对并非线程数的控制，以此来粗略的控制并发水平，一旦满了则走fallback。满了是什么意思？！满了的意思就是你的线程资源快用完了！！也就是堆积了！！为了保护系统所以需要把这个也作为一种熔断需要的异常计入熔断统计。
#      而sentinel可以采用精确的qps计数限流，而且这个限流不会参与熔断统计的异常计数(异常降级仅针对业务异常，对 Sentinel 限流降级本身的异常（BlockException）不生效，所以你触发流控异常随便多频繁，都不会触发熔断，剩余的请求还是可以正常去执行业务资源，因为如果你这个走熔断了，放过去的流量就没法走正常资源了)
#      所以综上所述，hystrix的配置熔断触发条件，qps不要配得太小，要配合对线程得占用来看，
#      比如默认10S，20次请求(如果都是超时长请求就是20个线程占用)即使不触发熔断也就占用20个线程，如果还有很多剩余得话应该可以接受，但是hystrix得command线程池默认是10，明显已经占满了，所以是必须触发熔断的！
#      对线程数的设置建议，如果该线程做的事情，主要是内存中的cpu计算，则cpu*2+1就可以了，但是如果做的事情涉及大量等待(磁盘,网络IO)，则可以把线程池数量设置大，因为等待时间长，而前面的线程又被占用等待，可以用其他线程先分配CPU来做其他事情。
#      建议hystrix的thread模式，对于独硬盘类的事务，设置线程数和前面的tomcat线程数保持一致，熔断的qps配置在线程数使用的50%即可。而信号量模式，也设置成最大能等于前面来的tomcat的线程数即可。
#      上面的结论可以自己写一个Sleep300-500ms之间的producer来模拟真实的请求rt在300-500ms压测一下看下是否说得正确，看线程池设置多大能达到最大tps，是否和上面吻合
#      而sentinel因为都是采用信号量模式控制流量，而且设置的参数层次更高直接是业务层次的参数，则按业务的qps理解进行设置即可。