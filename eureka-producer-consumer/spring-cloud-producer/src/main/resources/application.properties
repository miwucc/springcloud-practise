###########定义服务名字，端口，注册到哪个注册中心，以及注册中心的用户名,密码###########
spring.application.name=spring-cloud-producer
server.port=9900
#如果eureka配置了需要密码访问，打开了security.basic.enabled=true, security.user.name=test,security.user.password=test,则需要配置对应密码才能注册
eureka.user=test
eureka.pwd=test
eureka.client.serviceUrl.defaultZone=http://${eureka.user}:${eureka.pwd}@localhost:8000/eureka/
#eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/
####################################################################################


########### actuator端点配置 ###########
#官网actuator文档 https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/html/production-ready.html

#引入依赖spring-boot-starter-actuator开启访问端点，设置actuator暴露的root path和专门的端口(和应用端口区分开)
management.context-path=/acmonitor
management.port=10998
#设置了rootpath要重新设置一下health和status路径,目前这两个路径eureka貌似只收集，但是暂时没见怎么用，如果引入spa，目前看spa是在用这个来访问判断其健康与否
#注意！！！这个地方有个坑，如果你的springcloud版本=Dalston.RELASE,则需要按下面配置
##如果你的springcloud版本=Dalston.RELASE,不管management.port是否等于server.port，则需要配置下面两个加${management.context-path}前缀
##如果springcloud版本>Dalston.RELASE,也就是Dalston.SR(x),
##则如果management.port=server.port则需要配置下面的healthpath和statuspath的${management.context-path}前缀，\
##  如果management.port!=server.port则不要配置前缀，否则会出错,springcloudclient会自己拼接。代码参考EurekaClientAutoConfiguration.eurekaInstanceConfigBean
##eureka.instance.health-check-url-path=${management.context-path}/health
##eureka.instance.status-page-url-path=${management.context-path}/info
#如果是Dalston.RS1~Dalston.RS5，则不能配置${management.context-path}前缀，否则会重复

#eureka.instance.home-page-url-path=
#引入依赖spring-boot-starter-security 来保证actuator暴露接口的安全性
#端点分为敏感端点和非敏感端点，springboot1.5.2版本默认的非敏感端点只有info和health，这两个访问不需要密码,其它敏感端点需要密码
#management.security.enabled=false的情况下, 敏感和非敏感端点访问都不需要密码,，true的时候非敏感端点不需要密码
# .，但是可能暴露的信息会减少
#这里也要非常注意,不仅仅health检查端点打开了安全检查需要用户密码，也要看应用端是否有其它连接对连接进行了拦截(比如springmvc，shrio拦截器)，也需要对监控端点进行放开才行
management.security.enabled=true
#端点安全认证的检查路径，用户和密码
security.basic.path=/acmonitor
security.basic.enabled=true
security.user.name=acadmin
security.user.password=acadmin123456

#端点是否对外可以访问，以及是否是敏感端点可以完全由配置自由调整
#endpoints.enabled=false 关闭所有端点对外访问
#endpoints.metrics.enabled=true 单独开启metrics端点对外访问
#endpoints.sensitive=true 所有端点变为敏感端点
#endpoints.metrics.sensitive=true 单独设置metrics为敏感端点

#https://docs.spring.io/spring-boot/docs/1.5.3.RELEASE/reference/html/production-ready-endpoints.html
# 启用pause端点，该端点调用后其实执行的是，1-先刷新一把服务状态(设置为DOWN)进行上报 2-从注册中心把自己服务注销了 并关闭discoverClient组件，所以你在注册中心会先看见down，然后等一会不见了(需要注意eureka是否触发了保护模式，注意保护模式下是移除不掉的)
# 如果eureka.client.healthcheck.enabled=true，上面的第一步无法上报DOWN状态,pause的时候是先触发ApplicationInfoManager.setInstanceStatus(DOWN)这个方法,里面是执行了一次状态刷新器，然后马上上报。如果启用了healthcheck组件，这里刷的时候就会以health组件的为准，而不是传进来的值了
# 其实上面不影响服务下线其他服务感知，但是如果刚好eureka处于保护模式，则你PAUSE关闭又无法上报DOWN状态，则无法起到让其他服务不能调用你的作用
# 这里也可以进行改造，就是自己写一个health组件，在shutdown或者pause端点执行的时候，先主动把自己设置为非健康状态，则就可以让healthcheck和pause在eureka保护模式下都可以共同实现功能互不干扰了
# 可以参考配置类OnEnabledEndpointCondition里面前面key的值到底是endpoints还是endpoint
#endpoints.enabled=true，如果是false就是关闭所有端点
endpoints.pause.enabled=true
# 启用restart端点，之所以要启用restart端点，是因为pause端点的启用依赖restart端点的启用,可以见类RestartEndPoint他的子类生成了PauseEndpoint。restart会重启整个springboot容器，重启后pid不变
endpoints.restart.enabled=true
# 不建议使用shutdown端点直接关闭服务，因为这个在取消注册的同时也会关闭实例进程，而不仅仅是关闭DiscoveryClient组件，和springcloud自带的kill钩子一样的效果，因为客户端感知要时间，所以能在调用后保证流量都不来。
endpoints.shutdown.enabled=true
#禁用密码验证
#endpoints.shutdown.sensitive=false
# 把web端点暴露出来方便调用
# 在要关闭服务的时候先调用pause端口，等其他调用方感知后，看没有流量进来了再进行关闭，则可以安全下线。
endpoints.web.exposure.include=pause,restart,shutdown
#开启所有的端点
#management.endpoints.web.exposure.include=*


####################################################################################


###########引入SPA的情况下，作为client端的配置#####################
#采用clinet主动注册模式的情况下需要配置注册的spa adminServer地址
#spring.boot.admin.url=http://localhost:19300
#spring.boot.admin.client.prefer-ip=true
#如果是spa adminServer端是采用自己注册到eureka自发现模式的话，则不需要配置上面，升值spa client包都不需要引入

#spadminServer开启了security验证的话，客户端采用client直接注册模式的时候,client端必须要配置服务端的用户名密码，这样才能注册上去，因为注册的时候需要访问spa adminServer的 /api/application端口，需要用户名密码
#否则adminServer端无法正确获取信息
#spring.boot.admin.username=spaadmin
#spring.boot.admin.password=spaadmin123456
##################################################################

########### 引入springboot admin，开启actuator的情况下，作为SPA client方的配置 ###########
#如果使用的SPA，又开启了actuator端点监控，则需要把相应的用户名密码信息提交到SPA或者eureka，SPA server端才可以访问
#这个配置是如果采用client注册到adminServer的方式，client这边又开启了端点验证的话，需要把端点用户密码告知adminServer端
#spring.boot.admin.url=http://localhost:8080
#spring.boot.admin.client.metadata.user.name=${security.user.name}
#spring.boot.admin.client.metadata.user.password=${security.user.password}

#采用eureka提交，SPA Server自发现的方式,SPA那边不需要再进行任何配置，spa server端BasicAuthHttpHeaderProvider会自动取metamap中的值来加在header中访问端点
#Eureka中的metadataMap是专门用来存放一些自定义的数据，当注册中心或者其他服务需要此服务的某些配置时可以在metadataMap里取。实际上，每个instance都有各自的metadataMap，map中存放着需要用到的属性。例如，上面配置中的eureka.instance.metadata-map.user.name，当这个服务成功注册到Eureka上，SpringBootAdmin就会取拿到这个instance，进而拿到metadataMap里的属性，然后放入请求头，向此服务发送请求，访问此服务的actuator开放的端点。
#spa adminServer 的UI中访问连接自己的地址是api/application/id/health这种形式的，内部是走的zuul访问client的端点
eureka.instance.metadata-map.user.name=${security.user.name}
eureka.instance.metadata-map.user.password=${security.user.password}
eureka.instance.metadata-map.management.port=${management.port}
eureka.instance.metadata-map.management.context-path=${management.context-path}
####################################################################


#增加spring-boot-starter-actuator依赖后可以设置此参数，打开健康检查
#本来默认客户端和注册中心是采用心跳续租来检查是否健康的，但是开启了这个actuator健康检查之后，注册中心会根据客户端的/health端点信息来判断健康特性，
#如果不开启健康检查，只要进程有，每次心跳上报client的状态都是UP
#这样即使心跳有，但是客户端依赖的中间件挂了，注册中心也可知晓这个服务实例挂了.
#这个注释不知道为啥不在eurekaClientConfigBean中找不到，但是这个配置确实是有效的
#在引入了actuator的情况下，这个配置不影响对health端口路径的访问，只是确定自己上报给eureka状态之前是否需要用自己的健康检查类进行检查，配置为false的话，不会检查health状态影响往eureka上报的状态，也就是即使中间的组件挂了，上报还是UP，但是访问health端口可以看到这个已经down了
#当服务在eureka上注册的状态为DOWN的时候，调用方ribbon会直接过滤掉该服务。如果为了不让某个组件不健康而影响整个服务不可用，可以把下面这个设置为false，组件是否出错引入springcloud admin来进行监控，看自己需要
eureka.client.healthcheck.enabled=true
#默认采用了springboot的根路径，
#eureka.instance.health-check-url-path=/health
#eureka.instance.status-page-url-path=/info
#如果不开healthcheck的话，每次上replicator上报的只是自己服务的状态(InstanceInfo中的statue默认为up)，
#获取状态的方法为：org.springframework.cloud.netflix.eureka.EurekaHealthCheckHandler.getHealthStatus
# 但是无法知道自己内部某个模块出问题，如果要完全根据actuator中的healthIndicator探测器来判断当前状态，然后最后再在心跳中发给注册中心

#对于开启了actutor健康检查服务上报的服务，如果当时有组件出现错误，当前注册状态为down。
#该注册服务状态同步到springcloudClient端的话，在ribbon的loadbance阶段会认为该实例不可用进行过滤掉，如果过滤后一个可用实例也没有了这个时候远程调用会报错：
#com.netflix.client.ClientException: Load balancer does not have available server for client: serviceName
#所以开启了端点health健康检查的服务要注意，中间某个依赖组件挂了比如redis挂了导致health检查路径出现问题就会导致注册服务状态为down，会导致该服务实例全部的远程调用不通


#actuator是执行器驱动器中枢链接器的意思，主要就是收集了springboot的各种指标和实时运转信息
#可以点开看actuator其中的endpoint包，这个是端点的意思，主要是用来对外暴露http的信息查询端点，比如info，metric，helth，每个相应的类就叫xxxEndpoint
#下面有health，metric，info等包，就是对应信息的收集类health是健康信息类，每个都叫xxxHealthIndicator(健康指标)，用于手机系统类各种组件的健康信息,比如redis,rabbit等
#info下面的就叫xxxContributor(意思就是某类信息撰稿人),metrics下面的各种组件的累计指标信息和可用的相应的工具组件，比如Gauge


#所有eureka.instance开头的配置叫做服务实例配置，相关类可以看EurekaInstanceConfigBean,实例配置有很大一部分是配置元信息最后会在注册的时候发送给注册中心
#注册实例ID,用于区分同一服务不同实例。默认是采取主机名+端口,比如：localhost:spring-cloud-producer:9000
#要注意本地是否有安装wireshark一类的抓包器会自动生成Npcap Loopback adapter导致spring.cloud.client.ipAddress取的ip不对
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}


#注册上来的服务的续租间隔时间，默认30s，意思是每30s需要客户端服务注册到注册中心来维持心跳，在第一次注册的时候会把这个参数下放给服务提供者
#eureka.instance.lease-renewal-interval-in-seconds=30
#告诉注册中心,超过多少秒没有续租则认为服务时效超时，默认90s
#eureka.instance.lease-expiration-duration-in-seconds=90
#发送心跳的操作是一个异步任务，如果发送失败，则以2的指数形式延长重试的时间，直到达到eureka.instance.leaseRenewalIntervalInSeconds * eureka.client.heartbeatExecutorExponentialBackOffBound这个上限,之后一直以这个上限值作为重试间隔，直至重新连接到Eureka server，并且重新尝试连接到Eureka server的次数是不受限制的。

#是否注册到eureka,默认为true
eureka.client.register-with-eureka=true
#lient向Eureka server发送心跳和更新注册信息是不相同的，InstanceInfo也以固定的频率发送到Eureka server，这些信息在Eureka client启动后的40s（通过eureka.client.initialInstanceInfoReplicationIntervalSeconds配置）首次发送，之后每隔30s(通过eureka.client.instanceInfoReplicationIntervalSeconds配置)检查刷新一次本地服务状态statusInfo。
#这个更新里面会根据当前org.springframework.cloud.netflix.eureka.EurekaHealthCheckHandler.getStatus方法获取健康检查结果得到实例的真实健康状态(UP/DOWN等等)并上报到注册中心进行覆盖本地状态信息，定时任务类是InstanceInfoReplicator，然后renew心跳续租的时候会把这个状态报给注册中心
#最终调用健康检查的健康状态的收集类是CompositeHealthIndicator，这个是把所有的健康检查端点都集成到里面了
eureka.client.initial-instance-info-replication-interval-seconds=40
eureka.client.instance-info-replication-interval-seconds=30
#DiscoveryClient作为springcloud的超类，里面有有作为服务客户端启动定时任务的方法：
#com.netflix.discovery.DiscoveryClient.initScheduledTasks
#该方法会创建很多个定时任务，其中有一个叫InstanceInfoReplicator的定时任务，也有一个叫renew的定时任务，renew负责向注册中心续租和上报刷新服务的状态(up/down),而Replicator定时负责第一次向注册中心register，然后同时后面
#每eureka.client.instance-info-replication-interval-seconds时间通过EurekaHealthCheckHandler.getStatus方法刷新一下本地服务状态。然后renew续租的时候，会把当前状态带上发送给注册中心。
#客户端上传的状态，注册中心只是做保留和给使用者列表下发，但是ribbon如果发现得到的列表中状态不是up的话，则不会做请求转发到该实例上去。




#是否打开自我保护模式，默认是true,如果是false则一旦触发心跳不稳定状态则会直接移除服务列表,建议设置为true
#在eruka管理界面可以看到有Renews threshold和Renews(last min)两个显示，分别代表预期每分钟当前注册服务的续租总次数，和
#实际最近1分钟续租的总次数，如果Renews(last min)<Renews threshold,则会有大大的红字提示出现在界面中，提示触发了保护模式
#EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.
# RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
# 保护模式的意思是注册中心和某些服务之间心跳不稳定，但是注册中心不会把这些服务从服务列表中移除。
# 因为一旦触发保护状态，如果把某个服务实例移除的话，但可能只是该服务实例和注册中心之间网络不好，但是和服务被调用者之间是好的，一旦移除直接就不可用了
# Renews threshold =服务实例数*2(意思是默认30s续租一次)*0.85(eureka.server.renewal-percent-threshold可配置，默认0.85)
# eureka.server.enable-self-preservation=true

# 所有配置项请参考:EurekaServerConfigBean类
# eureka注册中心对客户端的所有rest请求处理请参考类:
#
#
#EurekaAutoServiceRegistration监听了spring容器的关闭事件，可以看方法org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(org.springframework.context.event.ContextClosedEvent)
#里面关闭了当前事件，最后调用的是com.netflix.discovery.DiscoveryClient.unregister方法
#
#
#
#gzip开启，这个主要是针对tomcat接收端，也就是client或者浏览器，或者是其他微服务过来的调用的请求，支持request和response的gzip压缩，如果request是gzip压缩的，则解压，如果返回值满足下面条件的则压缩了再返回
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript
#默认2k
server.compression.min-response-size=2048
