spring.application.name=spring-cloud-eureka

#TCP三次握手队列
#client端的socket等待队列：
#当第一次握手，建立半连接状态：client 通过 connect 向 server 发出 SYN 包时，client 会维护一个 socket 队列，如果 socket 等待队列满了，而 client 也会由此返回 connection time out，只要是 client 没有收到 第二次握手SYN+ACK，3s 之后，client 会再次发送，如果依然没有收到，9s 之后会继续发送。
#
#server端的半连接队列(syn队列)：
#此时server 会维护一个 SYN 队列，半连接 syn 队列的长度为 max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)  ，在机器的tcp_max_syn_backlog值在/proc/sys/net/ipv4/tcp_max_syn_backlog下配置，当 server 收到 client 的 SYN 包后，会进行第二次握手发送SYN＋ACK 的包加以确认，client 的 TCP 协议栈会唤醒 socket 等待队列，发出 connect 调用。
#
#server端的完全连接队列(accpet队列)：
#当第三次握手时，当server接收到ACK 报之后， 会进入一个新的叫 accept 的队列，该队列的长度为 min(backlog, somaxconn)，默认情况下，somaxconn 的值为 128，表示最多有 129 的 ESTAB 的连接等待 accept()，而 backlog 的值则应该是由 int listen(int sockfd, int backlog) 中的第二个参数指定，listen 里面的 backlog 可以有我们的应用程序去定义的。

#操作系统建立连接有两个队列，在sync_recived的时候是syn队列(又叫半连接队列，长度为 max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog))，握手完成后，会进入(accept队列)accept队列的长度参数backLog就是这儿的accept-count,
#在NioEndpoint的bind()方法中可以看到对这个操作系统serverSocket参数的这个设置。
#默认值100，指的是操作系统三次握手建立连接完成后，内核监听的处于establish状态的accpt队列中连接数，超过这个数操作系统将会refusedConnect
server.tomcat.accept-count=100
#默认值10000，同时最大连接数，当tomcat的acceptor线程发现当前tomcat内在处理的同时连接的socket超过这个数，则不再从操作系统的accept队列拿socket进来了，先进行等待
#这个参数也就是说，tomcat同时缓存的正在业务操作中和等待业务执行的连接数，业务线程200个已经使用满了，还需要等待10s才能有空闲，这个时候还可以accept进800个socket连接进行等待
#假入这个时候这800个连接的数据已经读取到缓存队列中，哪怕第9s这800个连接全部客户端自己断了，第10s业务线程一旦空闲出来，一样可以执行到之前已经读进数据待处理缓冲队列中的数据(哪怕只有空数据只有header没有任何参数值传上来)，也就是处理挤压请求数据。
server.tomcat.max-connections=10000
#这是tomcat的最小业务工作线程数，用来初始化Execute线程池大小,默认10，在AbstractEndpoint的构造方法中设置了默认值
server.tomcat.min-spare-threads=1
#这是tomcat的最大业务工作线程数，用来初始化Execute线程池大小,默认200，在AbstractEndpoint的构造方法中设置了默认值
server.tomcat.max-threads=200
server.port=8000
#禁止自己作为客户端注册到自己
eureka.client.register-with-eureka=false
#禁止自己作为客户端拉取服务列表
eureka.client.fetch-registry=false

#以上两项如果打开的话会在后台看到自己注册成了一个服务。

#客户端要访问的eureka地址,就算是单机节点这个也是必须要配置的，因为这个配置会作为eureka的复制节点来进行同步，如果是单节点的情况下，就会默认往自己身上再同步一遍
eureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka/
#启动后访问localhost:8000就是eureka后台了

#开启注册权限认证，必须要引入
#<dependency>
#<groupId>org.springframework.boot</groupId>
#<artifactId>spring-boot-starter-security</artifactId>
#</dependency>
#开启后注册上来的客户端必须配置用户名密码才可以访问 eureka.client.serviceUrl.defaultZone=<username>:<password>@http://localhost:8000/eureka/
#或者是配置eureka.user，eureka.pwd
#注意，只要你引入了spring-boot-starter-security依赖默认就会开启安全认证，并且会默认打开csrf防御，这个时候需要显示的把安全配置配完，如下
security.basic.enabled=false
security.user.name=test
security.user.password=test

#actuator权限打开关闭,引入了security的话默认是打开，访问metrics会要求输入账户名密码
#查看当前所以metrics http://127.0.0.1:8000/metrics
#查看当前活动sessions数http://127.0.0.1:8000/metrics/httpsessions.active,说这个是内嵌tomcat的指标？但我试了下觉得不准，还是要看源码
management.security.enabled=true

#注册上来的服务的续租间隔时间，默认30s，意思是每30s对每个注册中心发送一次心跳。需要客户端服务注册到注册中心来维持心跳，在第一次注册的时候会把这个参数下放给服务提供者
#eureka.instance.lease-renewal-interval-in-seconds=30 注意这个属性是配置在client端的而不是注册中心（客户端告诉服务端自己会按照该规则），是作为注册信息发给注册中心的,源码类DisCoveryClient.initSchedule
#超过多少秒没有续租则认为服务时效超时，默认90s，表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。自我保护模式下不生效
#eureka.instance.lease-expiration-duration-in-seconds=90  注意这个属性是配置在client端的而不是注册中心（客户端告诉服务端按照此规则等待自己），是作为注册信息发给注册中心的,源码类DisCoveryClient.initSchedule
#eureka.client.healthcheck.enabled	# 开启健康检查（需要spring-boot-starter-actuator依赖）

#在eruka管理界面可以看到有Renews threshold和Renews(last min)两个显示，分别代表预期每分钟当前注册服务的续租总次数，和
#实际最近1分钟续租的总次数，如果Renews(last min)<Renews threshold,则会有大大的红字提示出现在界面中，提示触发了保护模式
#EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.
# RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.

# 保护模式的意思是注册中心和某些服务之间心跳不稳定，但是注册中心不会把这些服务从服务列表中移除。
# 因为一旦触发保护状态，如果把某个服务实例移除的话，但可能只是该服务实例和注册中心之间网络不好，但是和服务被调用者之间是好的，一旦移除直接就不可用了
# Renews threshold =客户端配置的eruka个数*服务实例数*2(意思是默认30s续租一次(#eureka.instance.lease-renewal-interval-in-seconds))*0.85(eureka.server.renewal-percent-threshold可配置，默认0.85)之后取整。
# 比如如果是1个erueka，2个服务实例注册上来了，默认的30s的续租时间，系数默认0.85,则Renews  threshold=1*2*(60/30)*0.85=3

#是否打开自我保护模式，默认是true,如果是false则一旦触发心跳不稳定状态则会直接移除服务列表,建议设置为true （如果在实际环境中部署的时候，每次启动服务的ip可能发生变化，则最好不要开启自我保护模式，不然前面一次销毁的服务还会在注册中心上下不掉）
#eureka.server.enable-self-preservation=false
#失效剔除时间，默认60秒检查一次服务注册者上传上来的续租最大超时时间,发现有90s(eureka.instance.lease-expiration-duration-in-seconds)服务心跳续租超时的服务，则进行剔除，保护机制一旦触发，所有应用则受到保护，这个时候不会剔除，所以正式环境要慎用
#eureka.server.evictionIntervalTimerInMs=60000
#心跳Renews  threshold默认重算时间，默认15分钟(15 * 60 * 1000),重算的时候一般是在有新实例注册上来的时候回进行重算，或者是这个配置时间到了会重新进行计算
#eureka.server.renewal-threshold-update-interval-ms=900000

# 所有配置项请参考:EurekaServerConfigBean类
# eureka注册中心对客户端的所有rest请求处理请参考:com.netflix.eureka.resources包下面
# 比如ApplicationResource的addInstance方法就是收instance服务实例注册的方法
# 每次客户端注册到注册中心的时候，有一个参数叫isReplication，这个就可以告知是普通服务，还是用于复制的注册中心服务。可以参看上面写的这个类的addInstance
# 方法，在注册的时候，会先效验，然后调用publishEvent传播事件出去，然后真正调用register方法把服务注册在一个map<key服务名字,map<key实例ID,实例元信息>>的数据结构中
#
#
#关闭eurekaServer三级缓存中的最外一级缓存
eureka.server.use-read-only-response-cache=false
#设置readOnly缓存从writeRead1级缓存刷新过来的时间，默认是30s
#eureka.server.response-cache-update-interval-ms=

